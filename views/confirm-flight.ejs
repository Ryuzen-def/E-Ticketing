<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>E-Ticketing - Confirm Transaction</title>
    <link rel="stylesheet" href="/css/bootstrap.css" />
    <link rel="stylesheet" href="/css/bootstrap.min.css" />
    <link rel="stylesheet" href="/css/style.css" />
    <link rel="stylesheet" href="/css/font-awesome.css" />
    <link rel="stylesheet" href="/css/all.css" />
  </head>
  <body class="bg-pattern">
    <!-- Navbar -->
    <nav id="navbar" class="navbar navbar-expand navbar-dark bg-primary-local">
      <button
        class="navbar-toggler"
        type="button"
        data-bs-toggle="collapse"
        data-bs-target="#navbarNav"
        aria-controls="navbarNav"
        aria-expanded="false"
        aria-label="Toggle navigation"
      >
        <span class="navbar-toggler-icon"></span>
      </button>
      <div class="collapse navbar-collapse" id="navbarNav">
        <ul class="navbar-nav me-auto">
          <li class="nav-item">
            <a class="nav-link" aria-current="page" href="/homepage">Home</a>
          </li>
          <li class="nav-item">
            <a class="nav-link" href="#">About</a>
          </li>
          <li class="nav-item dropdown">
            <a
              class="nav-link dropdown-toggle "
              href="#"
              id="navbarDropdown"
              role="button"
              data-bs-toggle="dropdown"
              aria-expanded="false"
            >
              Flight
            </a>
            <ul class="dropdown-menu" aria-labelledby="navbarDropdown">
              <li>
                <a class="dropdown-item" href="/check-flight">Check Flight</a>
              </li>
              <li>
                <a class="dropdown-item" href="/book-flight">Book Flight</a>
              </li>
            </ul>
          </li>
          <li class="nav-item">
            <a class="nav-link" href="/contact">Contact</a>
          </li>
          <li class="nav-item">
            <a class="nav-link" href="/ticket-list">Check Ticket List</a>
          </li>
          <li class="nav-item">
            <a class="nav-link active" href="/confirm-admin">Confirm Transaction</a>
          </li>
        </ul>
        <form class="d-flex">
          <input
            class="form-control"
            type="search"
            placeholder="Search"
            aria-label="Search"
          />
          <button
            id="search-button"
            class="btn btn-primary btn-outline-primary text-light btn-sm text-nowrap mx-3"
            type="submit"
          >
            Search Flight
          </button>
          <button id="logout-button" class="btn btn-danger btn-sm">
            Logout
          </button>
        </form>
      </div>
    </nav>

    <!-- Content -->
    <h1 class="text-center my-4"><strong>Confirm Transaction</strong></h1>
    <div class="container my-4">
      <table class="table table-striped table-bordered rounded-table">
        <thead class="thead-dark">
          <tr>
            <th scope="col">Nomor Transaksi</th>
            <th scope="col">Nomor Tiket</th>
            <th scope="col">ID User</th>
            <th scope="col">Grand Total</th>
            <th scope="col">Status</th>
            <th scope="col">Transaction Date</th>
            <th scope="col">Action</th>
          </tr>
        </thead>
        <tbody id="ticket-table-body"></tbody>
      </table>
    </div>

    <!-- Modal -->
    <div id="ticketDetailModal" class="modal">
      <div class="modal-content">
        <span class="close-btn">&times;</span>
        <div id="ticketDetailContent">
          <!-- Konten modal akan diisi melalui JavaScript -->
        </div>
      </div>
    </div>

    <script src="/js/bootstrap.js"></script>
    <script src="/js/bootstrap.min.js"></script>
    <script src="/js/bootstrap.bundle.js"></script>
    <script>
      async function fetchTicketing() {
        try {
          const response = await fetch("http://localhost:3000/confirmTransaction");

          if (!response.ok) {
            throw new Error(`Failed to fetch data. Status: ${response.status}`);
          }

          const ticketing = await response.json();

          if (!Array.isArray(ticketing)) {
            throw new Error(
              "Expected an array of tickets, but got something else."
            );
          }

          // Render data tiket ke tabel
          renderTickets(ticketing);
        } catch (error) {
          console.error("Error while fetching ticketing data:", error);
        }
      }

      function formatDate(dateString) {
        const date = new Date(dateString);
        const day = String(date.getDate()).padStart(2, "0");
        const month = date.toLocaleString("en", { month: "short" });
        const year = date.getFullYear();
        const hours = String(date.getHours()).padStart(2, "0");
        const minutes = String(date.getMinutes()).padStart(2, "0");

        return `${day}-${month}-${year} ${hours}:${minutes}`;
      }

      function formatPrice(price) {
        return price.toLocaleString();
      }

      function renderTickets(ticketing) {
        const tableBody = document.getElementById("ticket-table-body");
        tableBody.innerHTML = ""; // Kosongkan isi tabel sebelum diisi ulang

        ticketing.forEach((ticket) => {
          let className = "";
          switch (ticket.class) {
            case "First":
              className = "First Class";
              break;
            case "Business":
              className = "Business";
              break;
            case "Premium":
              className = "Premium Economy";
              break;
            case "Economy":
              className = "Economy";
              break;
            default:
              className = "Unknown";
          }

          const row = `
            <tr>
              <td>${ticket.transaction_id}</td>
              <td>${ticket.ticket_id}</td>
              <td>${ticket.id_user}</td>
              <td>Rp. ${formatPrice(ticket.grand_total)}</td>
              <td>${ticket.isPaid}</td>
              <td>${formatDate(ticket.transaction_date)}</td>
              <td>
                <button class="btn btn-outline-success btn-sm edit-ticket-btn" data-ticket-id="${
                  ticket.transaction_id
                }">Accept</button>
              </td>
            </tr>
          `;
          tableBody.innerHTML += row;
        });
      }

      window.onload = fetchTicketing;

      function formatDate(dateString) {
        const date = new Date(dateString);
        const day = String(date.getDate()).padStart(2, "0");
        const month = date.toLocaleString("en", { month: "short" });
        const year = date.getFullYear();
        const hours = String(date.getHours()).padStart(2, "0");
        const minutes = String(date.getMinutes()).padStart(2, "0");

        return `${day}-${month}-${year} ${hours}:${minutes}`;
      }

      function formatPrice(price) {
        return price.toLocaleString();
      }

      document.addEventListener("DOMContentLoaded", () => {
        const logoutButton = document.getElementById("logout-button");

        if (logoutButton) {
          logoutButton.addEventListener("click", async () => {
            logoutButton.disabled = true;
            try {
              const response = await fetch(`/logout?_=${Date.now()}`, {
                method: "GET",
              });

              if (response.ok) {
                window.location.href = "/";
              } else {
                alert("Failed to logout. Please try again.");
              }
            } catch (error) {
              console.error("Error during logout:", error);
              alert("An error occurred while logging out. Please try again.");
            } finally {
              logoutButton.disabled = false;
            }
          });
        } else {
          console.error("Logout button not found.");
        }
      });

      document.addEventListener("DOMContentLoaded", () => {
    const tableBody = document.getElementById("ticket-table-body");

    // Event delegation untuk tombol Accept
    tableBody.addEventListener("click", async (e) => {
        if (e.target.classList.contains("edit-ticket-btn")) {
            const transactionId = e.target.getAttribute("data-ticket-id");

            if (!transactionId) {
                console.error("Transaction ID not found.");
                return;
            }

            const apiUrl = "http://localhost:3000/accept-transaction";

            try {
                const response = await fetch(apiUrl, {
                    method: "POST",
                    headers: { "Content-Type": "application/json" },
                    body: JSON.stringify({ transaction_id: transactionId }),
                });

                const result = await response.json();

                if (response.ok) {
                    alert("Transaction accepted successfully!");
                    location.reload(); // Reload halaman setelah berhasil
                } else {
                    alert("Error accepting transaction: " + result.message);
                }
            } catch (error) {
                console.error("Error accepting Transaction:", error);
                alert("An error occurred while processing the request.");
            }
        }
    });
});

    </script>
  </body>
</html>
